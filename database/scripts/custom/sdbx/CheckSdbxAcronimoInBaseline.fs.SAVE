//
// Copyright (c) 2014 Hogwart srl.  All Rights Reserved.
//
// Author: E. Bomitali
//
// Operation to check if acronimo is within cmdb baseline
//
// [Sdbx|Check Acronimo in Baseline]
//	command=
//	context=element
// description=Sdbx|Check Acronimo in Baseline
//	operation=load('custom/sdbx/CheckSdbxAcronimoInBaseline.fs');\nCheckSdbxAcronimoInBaseline.askUser(element);
//	permission=manage
//	target=dname:gen_folder=Acronimi/gen_folder=Staging/ISP_FolderBase=Sandbox.*/root=Organizations
//	type=serverscript
//

var CheckSdbxAcronimoInBaseline = (function (ele) {
    // Set logging
    var _logger = Packages.org.apache.log4j.Logger.getLogger('fs.sdbx');
    load('custom/lib/Orgs.fs');
    load('custom/lib/OrgsTree.fs');
    load('custom/lib/underscore.js');
    load('custom/lib/Mailer.fs');

    // ele may be an acronimo
    var _getAcronimoList = function (eleDn) {
        var ele = Orgs.findElement(eleDn);
        if (ele)
            return ele.Children
        else
            return new Array();
    }

	// ritorna il contesto, SystemTest oppure Produzione
    var _getContext = function (eleDn) {
        var patt = /(gen_folder=Acronimi\/gen_folder=Staging\/ISP_FolderBase=Sandbox(.*))\/root=Organizations/;
        var match = patt.exec(eleDn);
        if (match) {
			_logger.debug('_getContext, env ' + match[2] + ' acroFolderDn ' + match[1] + '/root=Organizations');
            return {
                acroFolderDn: match[1] + '/root=Organizations',
                environment:match[2]
            }
        } else {
            _logger.warn('_getEnvironment unexpected error on operation CheckSdbxAcronimoInBaseline, match failed');
            return null;
        }
    }

    var _testInBaseline = function (acroName) {
        var res = false
        _logger.debug('Checking ' + 'Acronimo=' + formula.util.encodeURL(acroName)
            + '/gen_folder=Acronimi/gen_folder=Baseline%2BAlarmedElement_SystemTest/gen_folder=Structure/root=Generational+Models/root=Services');
        var ele = Orgs.findElement('Acronimo=' + formula.util.encodeURL(acroName)
            + '/gen_folder=Acronimi/gen_folder=Baseline%2BAlarmedElement_SystemTest/gen_folder=Structure/root=Generational+Models/root=Services')
        if (ele) {
            res = true;
        }
        _logger.debug('checkAcronimoInSysTestBaseline result ' + res);
        return {
            acro:acroName,
            inBaseline:res
        }
    }

    var _listNotInBaseline = function (eleDn) {
        _logger.debug('_listNotInBaseline start on ' + eleDn);
        // ctx, root of acronimo and environment
        var ctx = _getContext(eleDn);
        var acroFolder = Orgs.findElement(ctx.acroFolderDn);
        // collect name of acronimo
        var sdbxNameList = OrgsTree.collectNameForElementOfClass(ctx.acroFolderDn,'Acronimo');
		_logger.debug('_listNotInBaseline sdbx list is ' + sdbxNameList.join());
        // gen_folder=Acronimi/gen_folder=Baseline/gen_folder=Produzione/gen_folder=Modello/gen_folder=Structure/root=Generational+Models/root=Services
        var baseDn = 'gen_folder=Acronimi/gen_folder=Baseline%2BAlarmedElement/gen_folder='
            + ctx.environment + '/gen_folder=Modello/gen_folder=Structure/root=Generational+Models/root=Services'
        var baseNameList = OrgsTree.collectNameForElementOfClass(baseDn,'Acronimo');
		_logger.debug('_listNotInBaseline base list is ' + baseNameList.join() + '\n\t\tchecked against ' + baseDn);
        var diff = _.difference(sdbxNameList, baseNameList);
		_logger.debug('_listNotInBaseline diff list is ' + diff.join());

        _logger.debug('_listNotInBaseline, acro non in baseline list >' + diff + '<');
        _logger.debug('_listNotInBaseline completed')
        return {
            acroList:diff,
            environment:ctx.environment
        };
    }

    var _sendEmailRequest = function (list, env) {
        _logger.debug('Sending email for acronimo(s) ' + list.join());
		var to = '';
        var subject = 'Richiesta aggiunta acronimo/i al flusso di ' + env;
        var msg = 'Si prega di aggiungere i seguenti acronimi ai dati del flusso di ' + env + ':||' + list.join('|');
		if (env === 'SystemTest') {
			to ='evelino.bomitali@hogwart.it,controllo.servizi.critici@intesasanpaolo.com,piergiorgio.centenaro@intesasanpaolo.com';
		} else {
			// Produzione
			to = 'evelino.bomitali@hogwart.it,controllo.servizi.critici@intesasanpaolo.com';
		}
        Mailer.send(to, subject, msg);
    }

    var _sendRequest4AcronimiNotInBaseline = function (ele) {
        // from ele check env
        _sendEmailRequest(_.map(_listNotInBaseline(ele), function (item) {return item.acro;}));
    }

    // closure on ele
    var _sendRequest4AcronimiNotInBaselineFromCallback = function (dn) {
        var res = _listNotInBaseline(dn);
        _sendEmailRequest(res.acroList, res.environment);
    }

    // Create our object which will be the "callback" from the client
    var callback =
    {
        ok: function (dn) {
            _sendRequest4AcronimiNotInBaselineFromCallback(dn);
            session.sendMessage('Inviata email di richiesta');
        },

        cancel: function () {
            session.sendMessage('Richiesta cancellata, nessuna email inviata');
        }
    }

    var _askUser  = function (ele) {

        var list = _listNotInBaseline(ele.DName).acroList;
        _logger.info('_askUser list length ' + list.length);
        // actually list is an array
        if (!_.isEmpty(list)) {
            var clientTicketScript = "\
    // @opt -1 \
    // @debug off \
	var msg = 'Gli acronimi " + list.join() + " non sono presenti nella baseline.\\nInviare una email per richiedere\\nl\\'aggiunta al flusso?\\n'\
    var res = confirm(msg);\
	if (res)\
		callback.ok(dn)\
	else\
		callback.cancel()\
"
            session.invokeScript( 'Ask Confirm',
                clientTicketScript,
                [ formula.util.makeRemote( callback ), element.DName ],
                [ 'callback', 'dn' ] )
        } else {
            message = "Acronimo/i presenti in baseline";
            _logger.debug( message );
            session.sendMessage( message );
        }

    }

    return {
        testInBaseline:_testInBaseline,
        listNotInBaseline:_listNotInBaseline,
        sendRequest:_sendRequest4AcronimiNotInBaseline,
        askUser:_askUser
    }
}())