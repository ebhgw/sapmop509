;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Copyright (c) 2014 NetIQ Corporation.  All Rights Reserved.
;
; THIS WORK IS SUBJECT TO U.S. AND INTERNATIONAL COPYRIGHT LAWS AND TREATIES.  IT MAY NOT BE USED, COPIED, 
; DISTRIBUTED, DISCLOSED, ADAPTED, PERFORMED, DISPLAYED, COLLECTED, COMPILED, OR LINKED WITHOUT NETIQ'S
; PRIOR WRITTEN CONSENT. USE OR EXPLOITATION OF THIS WORK WITHOUT AUTHORIZATION COULD SUBJECT THE 
; PERPETRATOR TO CRIMINAL AND CIVIL LIABILITY.
;
; NETIQ PROVIDES THE WORK "AS IS," WITHOUT ANY EXPRESS OR IMPLIED WARRANTY, INCLUDING WITHOUT THE
; IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT. NETIQ,
; THE AUTHORS OF THE WORK, AND THE OWNERS OF COPYRIGHT IN THE WORK ARE NOT LIABLE FOR ANY CLAIM,
; DAMAGES, OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF,
; OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS IN THE WORK.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Consoles.ini
;
; This file contains sections for each kind of console used within connected
; management systems.  Each section's name is the type of console a particular
; management system (or its adapter) can request.  If you have a section
; defined in this file whose name is (case insensitively) the same as the
; requested console, this script will be run at the client, passing in 
; context information that might be needed to present the console to
; the user.  The currently available context information is:
;
; element - the element for which the console is being presented
; host    - the host name (or IP address) of the destination host
; port    - the port number of the destination host
;
; If the script evaluates to a java.awt.Frame object (as in the examples below),
; then it will be tracked by the Formula client, and only a single console window
; for the given element can exist at one time.
;
; If a console type is requested but does not appear in this file, then the
; default console script defined in config/Formula.properties will be used.
;
; This file should exist as database/Consoles.ini when the Formula Server is
; started in order for it to take effect.
;

;
; For Tndm6530 terminal emulation, use the TeemWorld(tm) JavaBean
; terminal emulator for Tandem.
;
[Tndm6530]
script= \
   TeemWorldBean = Packages.TWBean.TeemWorldBean; \
   var frame = java.awt.Frame( "Console for " + element.getName() ); \
   var twb = TeemWorldBean( frame ); \
   twb.setInitialEmulation( TeemWorldBean.TWB_TA6530 ); \
   twb.construct(); \
   twb.connect( host, port ); \
   frame;

;
; If we're told to present a "generic-vt" emulator, use
; Formula's built-in VT emulator.
;
[generic-vt]
script=\
   var frame = Packages.com.mosol.terminal.telnet.TelnetFrame(); \
   var params = java.util.Hashtable(); \
   params.put( "targetName", element.getName() ); \
   params.put( "address", host.toString() ); \
   params.put( "port", port.toString() ); \
   params.put( "targetIcon",  element.getLabel().getIcon() ); \
   frame.setParams( params ); \
   frame;

;
; Just use the built-in telnet program for ANSI terminal emulation
;
[ansi]
script=\
   java.lang.Runtime.getRuntime().exec( "telnet " + host + " " + port );

