;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Copyright (c) 2014 NetIQ Corporation.  All Rights Reserved.
;
; THIS WORK IS SUBJECT TO U.S. AND INTERNATIONAL COPYRIGHT LAWS AND TREATIES.  IT MAY NOT BE USED, COPIED, 
; DISTRIBUTED, DISCLOSED, ADAPTED, PERFORMED, DISPLAYED, COLLECTED, COMPILED, OR LINKED WITHOUT NETIQ'S
; PRIOR WRITTEN CONSENT. USE OR EXPLOITATION OF THIS WORK WITHOUT AUTHORIZATION COULD SUBJECT THE 
; PERPETRATOR TO CRIMINAL AND CIVIL LIABILITY.
;
; NETIQ PROVIDES THE WORK "AS IS," WITHOUT ANY EXPRESS OR IMPLIED WARRANTY, INCLUDING WITHOUT THE
; IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT. NETIQ,
; THE AUTHORS OF THE WORK, AND THE OWNERS OF COPYRIGHT IN THE WORK ARE NOT LIABLE FOR ANY CLAIM,
; DAMAGES, OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF,
; OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS IN THE WORK.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; ---------------------------------------------------------------------
;
; Operations.ini - examples
;
;  Manage a list of operations for given contexts: element or alarm.
;
;  Currently implemented as a .ini file with sections in the form:
;
;  [Operation Name]
;  description = A nice name for menu, etc.
;  target = dname: Formula element dname matched by end of string or
;           class: Formula element classname or
;           script: script to run (given element as variable name, evaluating to true/false)
;  context = element or
;            alarm
;  type = script or
;         serverscript or
;         clientscript or
;         process
;  operation = what to do
;  permission = view or
;               access or
;               manage or
;               define
;
; ---------------------------------------------------------------------

; ---------------------------------------------------------------------
; Say hello from a menu choice.
;
; This operation causes the server to send a script to the client
; with instructions to run the "tests/hello" script from the script
; library on the formula server.
;
; The target for this operation is any element, since the "dname:"
; target tag is given no following text restriction.
;
; Any user that has view permission can run this operation.
;
[Hello]
description=Say hello to user
target=dname:
context=element
permission=view
type=script
operation=load( "tests/hello" )


; ---------------------------------------------------------------------
; Show a web page from a menu choice.
;
; This operation causes the server to send a script to the client
; with instructions to run the "showDocument()" method on the "applet"
; object's AppletContext.
;
; Remote scripts can generally use some predefined variables, such
; as "element", "applet", "main", and "connection".
;
; The target for this operation is any element, since the "dname:"
; target tag is given no following text restriction.
;
; Any user that has view permission can run this operation.
;
[About]
description=About Managed Object Solutions
target=dname:
context=element
permission=view
type=script
operation=applet.getAppletContext().showDocument( new java.net.URL( 'http://www.mosol.com' ), 'about' )


; ---------------------------------------------------------------------
; A directory listing, showing how to direct output of a
; console program to the user's desktop.
;
; This operation is restricted to those elements that have a
; class of "Rtr_Cisco".  The element class can be found on the
; first class=Name pair in the dname (from the left).
;
; This operation also illustrates how to restrict access to only
; those users who have a given permission, in this case the "manage"
; permission.
;
; This example will only work on a Win32 or OS/2 server, and
; is specifically routed to do a recursive listing of the
; formula install directory.  It also has a dependency on
; the location of the install directory.
;
; To change the program for Unix, do something similar to:
;
;    operation=sh -c '/usr/bin/ls -lR'
;
[Do a dir]
description=Monster directory listing (just for managed routers!)
target=class:Rtr_Cisco
context=element
permission=manage
type=process
operation=cmd.exe /c dir /s /b C:\\formula


; ---------------------------------------------------------------------
; Run an external program on the formula server, directing output
; to the client.  This operation runs the standard TCP/IP program
; "route" with the "IP Hostname" property that some Netview/Openview
; elements contain.
;
; This operation is restricted to those elements that have a
; the attribute called "IP Hostname".  This attribute is listed
; in the properties page of the element.
;
; This operation also illustrates how to restrict access to only
; those users who have a given permission, in this case the "access"
; permission.
;
; This operation illustrates how to restrict the target of an operation
; using a boolean expression in the Formula script language.  In this
; case, the element passed to the script is tested for the "IP Hostname"
; property.
;
; The script that is run on the server directs the output of the process
; to the client by running the "monitorProcess()" method on the session
; predefined variable.  This method is passed the element in question,
; the name of the window that will appear on the client, and the
; program to run on the server.  We did not use the "process" type
; for this operation because we wanted to pass variable arguments to the
; "route print" command.
;
[Route]
description=Show routing
target=script: \
    element["IP Hostname"] && \
    element["IP Hostname"] != ""
context=element
permission=access
type=serverscript
operation =                                             \
    session.monitorProcess(                             \
        element,                                        \
        "Show Routing For " + element.name,             \
        "route print " + element["IP Hostname"] )


; ---------------------------------------------------------------------
; Run an external program on the formula server, without directing output
; to the client.  This operation runs the standard Windows program
; "notepad" with the filename of "c:\\autoexec.bat", which may or
; may not exist on your server.
;
; This operation is restricted to those elements that have a
; the dname that ends with "root=Organizations".  This causes the
; operation to only appear on those elements that are on the
; Organizations page of the Formula client.
;
; This operation also illustrates how to restrict access to only
; those users who have a given permission, in this case the "define"
; permission.
;
; The script that is run on the server executes the "exec" method
; of the "java.lang.Runtime.getRuntime()" object.  This method
; accepts a program to run and simply executes it.  The client
; will not be notified if it is run successfully or not.
;
; This example will only work on a Win32 server, and
; is specifically intended to illustrate a program that will
; not appear on the client but gives a visual indication of
; something happening on the server.
;
; To change the program for Unix, do something like launching
; emacs or another X-Windows program that edits a file or starts
; empty.
;
[A server operation]
description=Funky Business Action (NOTEPAD.EXE)
target=dname:root=Organizations
context=element
permission=define
type=serverscript
operation = \
    java.lang.Runtime.getRuntime().exec( "notepad c:/autoexec.bat" )


; -------------------------------------------------
; Launch a Windows program on the user's desktop
;
; This example shows how a Windows program, located in a well known
; directory, can be launched from a popup menu on an element.
;
[Run Visio]
description=Run Visio
target=dname:
context=element
permission=view
type=clientscript
operation= \
	java.lang.Runtime.getRuntime().exec( "\\"D:\\\\Program Files\\\\Visio\\\\Visio32.exe\\" fish.vsd" )


; -------------------------------------------------
; Launch a TeemWorld(tm) JavaBean terminal emulator 
; to a specific host
;
[Open VT Emulator to taz]
description=VT on taz
target=script:element.getName() == "taz"
context=element
permission=access
type=clientscript
operation= \
	TeemWorldBean = Packages.TWBean.TeemWorldBean; \
	var twb = TeemWorldBean(java.awt.Frame()); \
	twb.setInitialEmulation(TeemWorldBean.TWB_DECVT); \
	twb.construct(); \
	twb.connect("taz",23);


; ---------------------------------------------------------------------
; Display selected alarm properties in a message box on the client.
;
[Display alarm information]
description=Display alarm information
target=dname:
context=alarm
permission=manage
type=clientscript
operation = \
    var str = ""; \
    for( var i = 0 ; i < alarms.length ; ++i ) \
    { \
        str = str + "Element " + ( i + 1 ) + ": " + alarms[i].element.DName + ":\\n\\n"; \
        for( p in alarms[i].properties ) \
            str = str + "               " + p + " = " + alarms[i][p] + "\\n"; \
        if( i != alarms.length - 1 ) \
            str = str + "\\n"; \
    } \
    info( str );

; ---------------------------------------------------------------------
; Sets selected user session logging to DEBUG level
;
[Set Session Logging|DEBUG]
description=Set Session Logging|DEBUG
target=dnamematch:session=.*/sessions=Sessions/formulaServer=Server/root=Administration
context=element
type=serverscript
operation=this.element.getSession().setLogPriorityDebug();
command=
permission=define

; ---------------------------------------------------------------------
; Sets selected user session logging to INFO level
;
[Set Session Logging|INFO]
description=Set Session Logging|INFO
target=dnamematch:session=.*/sessions=Sessions/formulaServer=Server/root=Administration
context=element
type=serverscript
operation=this.element.getSession().setLogPriorityInfo();
command=
permission=define

